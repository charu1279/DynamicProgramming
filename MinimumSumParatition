/*Minimum sum partition problem using dynamic programming is discussed here. Given a set of integers, partition the set such the difference between 
the two set is minimum (absolute difference ) and print the difference.

Sample Input:

4 (number of elements of the array)

14 25 78 96 (array elements)

Sample Output:

7
Explanation:

S1 = {96, 14}

S2 = {78, 25}

Sum of S1 = 110

Sum of S2 = 103

|S1 - S2| = 7
*/

#include <iostream>
#include<limits.h>
using namespace std;
int FindMin(int a[],int n){
    int sum=0,i,j;
    for(i=0;i<n;i++){
        sum=sum+a[i];
    }
    bool t[n+1][sum/2+1];
    for(i=0;i<=n;i++){
        t[i][0]=true;
    }
    for(i=0;i<=sum/2;i++){
        t[0][i]=false;                      
    }
    for(i=1;i<=n;i++){
        for(j=1;j<=sum/2;j++){
            t[i][j]=t[i-1][j];
            if(a[i-1]<=j){
                t[i][j]|=t[i-1][j-a[i-1]];
            }
            /*else{
                t[i][j]=t[i-1][j];
            }*/
        }
    }
    int diff=INT_MAX;
    for(j=sum/2;j>=0;j--){
        if(t[n][j]==true){
            diff=sum-2*j;
            break;
        }
    }
    return diff;
}
int main()
{
    int n,i;
    cin>>n;
    int a[n];
    for(i=0;i<n;i++){
        cin>>a[i];
    }
    cout<<FindMin(a,n);
    return 0;
}

